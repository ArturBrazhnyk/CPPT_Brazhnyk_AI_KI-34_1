package Lab3.Brazhnyk.KI304;

import java.io.IOException;

/**
 * Клас Truck представляє вантажівку, що має можливість завантажувати, вивантажувати вантаж,
 * а також перевіряти стан коліс і керувати двигуном.
 * 
 * Цей клас успадковує властивості та методи класу Car, додаючи можливість працювати з вантажем,
 * а також конкретну реалізацію методів для перевірки коліс та запуску/зупинки двигуна вантажівки.
 */
public class Truck extends Car implements Loadable {
    private int maxLoad;        // Максимальна вантажопідйомність вантажівки
    private int currentLoad;    // Поточний вантаж

    /**
     * Конструктор класу Truck, ініціалізує вантажівку з максимальною вантажопідйомністю.
     * 
     * @param maxLoad максимальна вантажопідйомність вантажівки в кілограмах.
     * @throws IOException якщо виникає помилка при створенні об'єкта Car.
     */
    public Truck(int maxLoad) throws IOException {
        super();  // Викликаємо конструктор батьківського класу Car
        this.maxLoad = maxLoad;
        this.currentLoad = 0;
    }

    /**
     * Перевіряє поточний стан вантажу.
     * Виводить поточну кількість вантажу з максимальною вантажопідйомністю.
     */
    @Override
    public void checkLoad() {
        System.out.println("Поточний вантаж: " + currentLoad + " з " + maxLoad);
    }

    /**
     * Завантажує вказану кількість вантажу.
     * 
     * Якщо поточний вантаж після завантаження не перевищує максимальної вантажопідйомності,
     * вантаж додається. Якщо перевищує — виводиться повідомлення про помилку.
     *
     * @param weight вага вантажу, який потрібно завантажити (в кілограмах).
     */
    @Override
    public void load(int weight) {
        if (currentLoad + weight <= maxLoad) {
            currentLoad += weight;
            log("Вантаж додано: " + weight);
        } else {
            System.out.println("Перевищено максимальну вантажопідйомність!");
        }
    }

    /**
     * Вивантажує вказану кількість вантажу.
     * 
     * Якщо поточний вантаж достатній для вивантаження, вантаж вивантажується. Якщо ні —
     * виводиться повідомлення про помилку.
     *
     * @param weight вага вантажу, який потрібно вивантажити (в кілограмах).
     */
    @Override
    public void unload(int weight) {
        if (currentLoad >= weight) {
            currentLoad -= weight;
            log("Вантаж вивантажено: " + weight);
        } else {
            System.out.println("Недостатньо вантажу для вивантаження!");
        }
    }

    /**
     * Перевіряє стан коліс вантажівки.
     * Виводить стан кожного колеса (наприклад, "Добрий").
     */
    @Override
    public void checkWheels() {
        System.out.println("Перевірка коліс вантажівки:");
        for (int i = 0; i < wheels.length; i++) {
            System.out.println("Колесо " + (i + 1) + ": " + wheels[i].getCondition());
        }
    }

    /**
     * Запускає двигун вантажівки.
     * Виводить повідомлення про запуск двигуна та записує в лог.
     */
    @Override
    public void startEngine() {
        System.out.println("Двигун вантажівки запущено.");
        log("Двигун вантажівки запущено.");
    }

    /**
     * Зупиняє двигун вантажівки.
     * Виводить повідомлення про зупинку двигуна та записує в лог.
     */
    @Override
    public void stopEngine() {
        System.out.println("Двигун вантажівки зупинено.");
        log("Двигун вантажівки зупинено.");
    }
}

